{"ast":null,"code":"var _jsxFileName = \"/Users/phanhoang/Desktop/kodfrontend-15.10.20/src/components/parts/Board.js\";\nimport React, { Component, useState } from 'react';\nimport { Col, Row, Container } from 'react-bootstrap';\nimport { Cell } from \"../pieces/Cell\"; // await execute();\n\nlet colors = [0, 1, 2, 3, 4];\n\nlet fillCell = (rowIndex, colIndex, board, row) => {\n  let color1 = -1,\n      color2 = -2;\n\n  if (rowIndex >= 2) {\n    // check two cells above\n    if (board[rowIndex - 1][colIndex] === board[rowIndex - 2][colIndex]) color1 = board[rowIndex - 1][colIndex];\n  }\n\n  if (colIndex >= 2) {\n    // check two cells on the left\n    if (row[colIndex - 1] === row[colIndex - 2]) color2 = row[colIndex - 1];\n  }\n\n  let filtered = colors.filter(item => item !== color1 && item !== color2);\n  return filtered[Math.floor(Math.random() * filtered.length)];\n};\n\nlet board = [];\n\nfor (let i = 0; i < 10; i++) {\n  let row = [];\n\n  for (let j = 0; j < 10; j++) {\n    row.push(fillCell(i, j, board, row));\n  }\n\n  board.push(row);\n}\n\nexport const Board = props => {\n  // console.log(board)\n  const myBoard = [];\n\n  for (let i = 0; i < 10; i++) {\n    let row = [];\n\n    for (let j = 0; j < 10; j++) {\n      row.push(fillCell(i, j, myBoard, row));\n    }\n\n    myBoard.push(row);\n  }\n\n  let [board, setBoard] = useState(myBoard);\n\n  const getMatches = board => {\n    let matches = [];\n    let match = [];\n\n    for (let i = 0; i < board.length; i++) {\n      let curr = -1;\n\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[i][j] !== curr) {\n          curr = board[i][j];\n\n          if (match.length >= 3) {\n            matches.push(match);\n          }\n\n          match = [];\n          match.push({\n            i,\n            j\n          });\n        } else {\n          match.push({\n            i,\n            j\n          });\n          if (j == board.length - 1 && match.length >= 3) matches.push(match);\n        }\n      }\n\n      match = [];\n    }\n\n    for (let i = 0; i < board.length; i++) {\n      let curr = -1;\n\n      for (let j = 0; j < board[i].length; j++) {\n        if (board[j][i] !== curr) {\n          curr = board[j][i];\n\n          if (match.length >= 3) {\n            matches.push(match);\n          }\n\n          match = [];\n          match.push({\n            \"i\": j,\n            \"j\": i\n          });\n        } else {\n          match.push({\n            \"i\": j,\n            \"j\": i\n          });\n          if (i == board.length - 1 && match.length >= 3) matches.push(match);\n        }\n      }\n\n      match = [];\n    } // console.log(matches)\n\n\n    return matches;\n  };\n\n  let refreshCells = (board, matches) => {\n    // let temp = JSON.parse(JSON.stringify(board))\n    // for (let i = 0; i < board.length; i++) {\n    //     let row= [];\n    //     for (let j = 0; j < board[i].length; j++) {\n    //         row.push(board[i][j])\n    //     }\n    // }\n    let temp = JSON.parse(JSON.stringify(board));\n\n    for (let i = 0; i < matches.length; i++) {\n      for (let j = 0; j < matches[i].length; j++) {\n        temp[matches[i][j][\"i\"]][matches[i][j][\"j\"]] = Math.floor(Math.random() * 5);\n      }\n    }\n\n    return temp;\n  };\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  let cascadeBoard = board => {\n    console.log(JSON.stringify(board));\n\n    while (true) {\n      // await sleep(500);\n      let matches = getMatches(board); // console.log(matches)\n\n      console.log(matches, matches.length * 50);\n      if (matches.length === 0) break;\n      board = refreshCells(board, matches);\n      props.updateScore(matches.length * 50);\n      setBoard(board); // board1 = refreshCells(board1, matches)\n      // console.log(JSON.stringify(board1))\n      // console.log(\"-------------------------------------------\")\n    }\n  };\n\n  const [clickedCells, setClickedCells] = useState([]);\n\n  const swapColor = async (r, c) => {\n    const temp = [...clickedCells];\n    temp.push({\n      r,\n      c\n    });\n    setClickedCells(temp);\n\n    if (temp.length == 1) {\n      return;\n    }\n\n    if (temp.length == 2) {\n      let isValidMove = true;\n\n      if (temp[0][\"r\"] === temp[1][\"r\"] && temp[0][\"c\"] === temp[1][\"c\"]) {\n        isValidMove = false;\n      } else if (temp[0][\"r\"] === temp[1][\"r\"]) {\n        if (Math.abs(temp[0][\"c\"] - temp[1][\"c\"]) == 1) {\n          let tempColor = board[temp[0][\"r\"]][temp[0][\"c\"]];\n          let tempBoard = JSON.parse(JSON.stringify(board));\n          tempBoard[temp[0][\"r\"]][temp[0][\"c\"]] = tempBoard[temp[1][\"r\"]][temp[1][\"c\"]];\n          tempBoard[temp[1][\"r\"]][temp[1][\"c\"]] = tempColor;\n          setBoard(tempBoard);\n          console.log(clickedCells);\n          setClickedCells([]);\n          cascadeBoard(tempBoard);\n        }\n      } else if (temp[0][\"c\"] === temp[1][\"c\"]) {\n        if (Math.abs(temp[0][\"r\"] - temp[1][\"r\"]) <= 1) {\n          let tempColor = board[temp[0][\"r\"]][temp[0][\"c\"]];\n          let tempBoard = JSON.parse(JSON.stringify(board));\n          tempBoard[temp[0][\"r\"]][temp[0][\"c\"]] = tempBoard[temp[1][\"r\"]][temp[1][\"c\"]];\n          tempBoard[temp[1][\"r\"]][temp[1][\"c\"]] = tempColor;\n          setBoard(tempBoard);\n          setClickedCells([]);\n          cascadeBoard(tempBoard);\n        }\n      } else {\n        isValidMove = false;\n        setClickedCells([]);\n      }\n\n      if (!isValidMove) {\n        //reset array\n        setClickedCells([]);\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 18\n    }\n  }, board.map((_row, indexRow) => /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 43\n    }\n  }, _row.map((_col, indexCol) => /*#__PURE__*/React.createElement(Cell, {\n    row: indexRow,\n    col: indexCol,\n    backgroundId: board[indexRow][indexCol],\n    swapColor: swapColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 21\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/phanhoang/Desktop/kodfrontend-15.10.20/src/components/parts/Board.js"],"names":["React","Component","useState","Col","Row","Container","Cell","colors","fillCell","rowIndex","colIndex","board","row","color1","color2","filtered","filter","item","Math","floor","random","length","i","j","push","Board","props","myBoard","setBoard","getMatches","matches","match","curr","refreshCells","temp","JSON","parse","stringify","sleep","ms","Promise","resolve","setTimeout","cascadeBoard","console","log","updateScore","clickedCells","setClickedCells","swapColor","r","c","isValidMove","abs","tempColor","tempBoard","map","_row","indexRow","_col","indexCol"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,GAAT,EAAcC,GAAd,EAAmBC,SAAnB,QAAoC,iBAApC;AACA,SAASC,IAAT,QAAqB,gBAArB,C,CAEA;;AACA,IAAIC,MAAM,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAb;;AAEA,IAAIC,QAAQ,GAAG,CAACC,QAAD,EAAWC,QAAX,EAAqBC,KAArB,EAA4BC,GAA5B,KAAoC;AAC/C,MAAIC,MAAM,GAAG,CAAC,CAAd;AAAA,MAAiBC,MAAM,GAAG,CAAC,CAA3B;;AACA,MAAIL,QAAQ,IAAI,CAAhB,EAAmB;AAAE;AACjB,QAAIE,KAAK,CAACF,QAAQ,GAAG,CAAZ,CAAL,CAAoBC,QAApB,MAAkCC,KAAK,CAACF,QAAQ,GAAG,CAAZ,CAAL,CAAoBC,QAApB,CAAtC,EACIG,MAAM,GAAGF,KAAK,CAACF,QAAQ,GAAG,CAAZ,CAAL,CAAoBC,QAApB,CAAT;AACP;;AACD,MAAIA,QAAQ,IAAI,CAAhB,EAAmB;AAAE;AACjB,QAAIE,GAAG,CAACF,QAAQ,GAAG,CAAZ,CAAH,KAAsBE,GAAG,CAACF,QAAQ,GAAG,CAAZ,CAA7B,EACII,MAAM,GAAGF,GAAG,CAACF,QAAQ,GAAG,CAAZ,CAAZ;AACP;;AACD,MAAIK,QAAQ,GAAGR,MAAM,CAACS,MAAP,CAAcC,IAAI,IAAKA,IAAI,KAAKJ,MAAT,IAAmBI,IAAI,KAAKH,MAAnD,CAAf;AACA,SAAOC,QAAQ,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACM,MAApC,CAAD,CAAf;AACH,CAZD;;AAaA,IAAIV,KAAK,GAAG,EAAZ;;AACA,KAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,MAAIV,GAAG,GAAG,EAAV;;AACA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBX,IAAAA,GAAG,CAACY,IAAJ,CAAShB,QAAQ,CAACc,CAAD,EAAIC,CAAJ,EAAOZ,KAAP,EAAcC,GAAd,CAAjB;AACH;;AACDD,EAAAA,KAAK,CAACa,IAAN,CAAWZ,GAAX;AACH;;AAED,OAAO,MAAMa,KAAK,GAAIC,KAAD,IAAW;AAE5B;AACA,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzB,QAAIV,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,EAAzB,EAA6B;AACzBX,MAAAA,GAAG,CAACY,IAAJ,CAAShB,QAAQ,CAACc,CAAD,EAAIC,CAAJ,EAAOI,OAAP,EAAgBf,GAAhB,CAAjB;AACH;;AACDe,IAAAA,OAAO,CAACH,IAAR,CAAaZ,GAAb;AACH;;AACD,MAAI,CAACD,KAAD,EAAQiB,QAAR,IAAoB1B,QAAQ,CAACyB,OAAD,CAAhC;;AAEA,QAAME,UAAU,GAAIlB,KAAD,IAAW;AAC1B,QAAImB,OAAO,GAAG,EAAd;AACA,QAAIC,KAAK,GAAG,EAAZ;;AACA,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACU,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,UAAIU,IAAI,GAAG,CAAC,CAAZ;;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACW,CAAD,CAAL,CAASD,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACtC,YAAIZ,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,MAAgBS,IAApB,EAA0B;AACtBA,UAAAA,IAAI,GAAGrB,KAAK,CAACW,CAAD,CAAL,CAASC,CAAT,CAAP;;AACA,cAAIQ,KAAK,CAACV,MAAN,IAAgB,CAApB,EAAuB;AACnBS,YAAAA,OAAO,CAACN,IAAR,CAAaO,KAAb;AACH;;AACDA,UAAAA,KAAK,GAAG,EAAR;AACAA,UAAAA,KAAK,CAACP,IAAN,CAAW;AAAEF,YAAAA,CAAF;AAAKC,YAAAA;AAAL,WAAX;AACH,SAPD,MAQK;AACDQ,UAAAA,KAAK,CAACP,IAAN,CAAW;AAAEF,YAAAA,CAAF;AAAKC,YAAAA;AAAL,WAAX;AACA,cAAIA,CAAC,IAAIZ,KAAK,CAACU,MAAN,GAAe,CAApB,IAAyBU,KAAK,CAACV,MAAN,IAAgB,CAA7C,EACIS,OAAO,CAACN,IAAR,CAAaO,KAAb;AACP;AACJ;;AACDA,MAAAA,KAAK,GAAG,EAAR;AACH;;AACD,SAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,KAAK,CAACU,MAA1B,EAAkCC,CAAC,EAAnC,EAAuC;AACnC,UAAIU,IAAI,GAAG,CAAC,CAAZ;;AACA,WAAK,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,KAAK,CAACW,CAAD,CAAL,CAASD,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACtC,YAAIZ,KAAK,CAACY,CAAD,CAAL,CAASD,CAAT,MAAgBU,IAApB,EAA0B;AACtBA,UAAAA,IAAI,GAAGrB,KAAK,CAACY,CAAD,CAAL,CAASD,CAAT,CAAP;;AACA,cAAIS,KAAK,CAACV,MAAN,IAAgB,CAApB,EAAuB;AACnBS,YAAAA,OAAO,CAACN,IAAR,CAAaO,KAAb;AACH;;AACDA,UAAAA,KAAK,GAAG,EAAR;AACAA,UAAAA,KAAK,CAACP,IAAN,CAAW;AAAE,iBAAKD,CAAP;AAAU,iBAAKD;AAAf,WAAX;AACH,SAPD,MAQK;AACDS,UAAAA,KAAK,CAACP,IAAN,CAAW;AAAE,iBAAKD,CAAP;AAAU,iBAAKD;AAAf,WAAX;AACA,cAAIA,CAAC,IAAIX,KAAK,CAACU,MAAN,GAAe,CAApB,IAAyBU,KAAK,CAACV,MAAN,IAAgB,CAA7C,EACIS,OAAO,CAACN,IAAR,CAAaO,KAAb;AACP;AACJ;;AACDA,MAAAA,KAAK,GAAG,EAAR;AACH,KAxCyB,CAyC1B;;;AACA,WAAOD,OAAP;AACH,GA3CD;;AA6CA,MAAIG,YAAY,GAAG,CAACtB,KAAD,EAAQmB,OAAR,KAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAII,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe1B,KAAf,CAAX,CAAX;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,OAAO,CAACT,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACrC,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGO,OAAO,CAACR,CAAD,CAAP,CAAWD,MAA/B,EAAuCE,CAAC,EAAxC,EAA4C;AACxCW,QAAAA,IAAI,CAACJ,OAAO,CAACR,CAAD,CAAP,CAAWC,CAAX,EAAc,GAAd,CAAD,CAAJ,CAAyBO,OAAO,CAACR,CAAD,CAAP,CAAWC,CAAX,EAAc,GAAd,CAAzB,IAA+CL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAA/C;AACH;AACJ;;AACD,WAAOc,IAAP;AACH,GAfD;;AAiBA,WAASI,KAAT,CAAeC,EAAf,EAAmB;AACf,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,EAAV,CAAjC,CAAP;AACH;;AAED,MAAII,YAAY,GAAIhC,KAAD,IAAW;AAC1BiC,IAAAA,OAAO,CAACC,GAAR,CAAYV,IAAI,CAACE,SAAL,CAAe1B,KAAf,CAAZ;;AACA,WAAO,IAAP,EAAa;AACT;AACA,UAAImB,OAAO,GAAGD,UAAU,CAAClB,KAAD,CAAxB,CAFS,CAGT;;AAEAiC,MAAAA,OAAO,CAACC,GAAR,CAAYf,OAAZ,EAAqBA,OAAO,CAACT,MAAR,GAAgB,EAArC;AACA,UAAIS,OAAO,CAACT,MAAR,KAAmB,CAAvB,EACI;AACJV,MAAAA,KAAK,GAAGsB,YAAY,CAACtB,KAAD,EAAQmB,OAAR,CAApB;AACAJ,MAAAA,KAAK,CAACoB,WAAN,CAAkBhB,OAAO,CAACT,MAAR,GAAiB,EAAnC;AACAO,MAAAA,QAAQ,CAACjB,KAAD,CAAR,CAVS,CAWT;AACA;AACA;AACH;AACJ,GAjBD;;AAmBA,QAAM,CAACoC,YAAD,EAAeC,eAAf,IAAkC9C,QAAQ,CAAC,EAAD,CAAhD;;AACA,QAAM+C,SAAS,GAAG,OAAOC,CAAP,EAAUC,CAAV,KAAgB;AAC9B,UAAMjB,IAAI,GAAG,CAAC,GAAGa,YAAJ,CAAb;AACAb,IAAAA,IAAI,CAACV,IAAL,CAAU;AAAE0B,MAAAA,CAAF;AAAKC,MAAAA;AAAL,KAAV;AACAH,IAAAA,eAAe,CAACd,IAAD,CAAf;;AACA,QAAIA,IAAI,CAACb,MAAL,IAAe,CAAnB,EAAsB;AAClB;AACH;;AACD,QAAIa,IAAI,CAACb,MAAL,IAAe,CAAnB,EAAsB;AAClB,UAAI+B,WAAW,GAAG,IAAlB;;AACA,UAAIlB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,MAAiBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAjB,IAAiCA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,MAAiBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAtD,EAAoE;AAChEkB,QAAAA,WAAW,GAAG,KAAd;AACH,OAFD,MAGK,IAAIlB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,MAAiBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAArB,EAAmC;AACpC,YAAIhB,IAAI,CAACmC,GAAL,CAASnB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAeA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,KAAyC,CAA7C,EAAgD;AAC5C,cAAIoB,SAAS,GAAG3C,KAAK,CAACuB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAL,CAAoBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAApB,CAAhB;AACA,cAAIqB,SAAS,GAAGpB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe1B,KAAf,CAAX,CAAhB;AACA4C,UAAAA,SAAS,CAACrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAT,CAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,IAAwCqB,SAAS,CAACrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAT,CAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,CAAxC;AACAqB,UAAAA,SAAS,CAACrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAT,CAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,IAAwCoB,SAAxC;AACA1B,UAAAA,QAAQ,CAAC2B,SAAD,CAAR;AACAX,UAAAA,OAAO,CAACC,GAAR,CAAYE,YAAZ;AACAC,UAAAA,eAAe,CAAC,EAAD,CAAf;AACAL,UAAAA,YAAY,CAACY,SAAD,CAAZ;AACH;AACJ,OAXI,MAYA,IAAIrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,MAAiBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAArB,EAAmC;AACpC,YAAIhB,IAAI,CAACmC,GAAL,CAASnB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,IAAeA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,KAAyC,CAA7C,EAAgD;AAC5C,cAAIoB,SAAS,GAAG3C,KAAK,CAACuB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAL,CAAoBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAApB,CAAhB;AACA,cAAIqB,SAAS,GAAGpB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe1B,KAAf,CAAX,CAAhB;AACA4C,UAAAA,SAAS,CAACrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAT,CAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,IAAwCqB,SAAS,CAACrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAT,CAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,CAAxC;AACAqB,UAAAA,SAAS,CAACrB,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAD,CAAT,CAAwBA,IAAI,CAAC,CAAD,CAAJ,CAAQ,GAAR,CAAxB,IAAwCoB,SAAxC;AACA1B,UAAAA,QAAQ,CAAC2B,SAAD,CAAR;AACAP,UAAAA,eAAe,CAAC,EAAD,CAAf;AACAL,UAAAA,YAAY,CAACY,SAAD,CAAZ;AACH;AACJ,OAVI,MAWA;AACDH,QAAAA,WAAW,GAAG,KAAd;AACAJ,QAAAA,eAAe,CAAC,EAAD,CAAf;AACH;;AAED,UAAI,CAACI,WAAL,EAAkB;AAAE;AAChBJ,QAAAA,eAAe,CAAC,EAAD,CAAf;AACH;AACJ;AACJ,GA5CD;;AA6CA,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAK,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAELrC,KAAK,CAAC6C,GAAN,CAAU,CAACC,IAAD,EAAOC,QAAP,kBAAoB,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACzBD,IAAI,CAACD,GAAL,CAAS,CAACG,IAAD,EAAOC,QAAP,kBACN,oBAAC,IAAD;AAAM,IAAA,GAAG,EAAEF,QAAX;AAAqB,IAAA,GAAG,EAAEE,QAA1B;AAAoC,IAAA,YAAY,EAAEjD,KAAK,CAAC+C,QAAD,CAAL,CAAgBE,QAAhB,CAAlD;AAA6E,IAAA,SAAS,EAAEX,SAAxF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADyB,CAA9B,CAFK,CAAL,CAAR;AAUH,CA1JM","sourcesContent":["import React, { Component, useState } from 'react'\r\nimport { Col, Row, Container } from 'react-bootstrap';\r\nimport { Cell } from \"../pieces/Cell\"\r\n\r\n// await execute();\r\nlet colors = [0, 1, 2, 3, 4];\r\n\r\nlet fillCell = (rowIndex, colIndex, board, row) => {\r\n    let color1 = -1, color2 = -2;\r\n    if (rowIndex >= 2) { // check two cells above\r\n        if (board[rowIndex - 1][colIndex] === board[rowIndex - 2][colIndex])\r\n            color1 = board[rowIndex - 1][colIndex];\r\n    }\r\n    if (colIndex >= 2) { // check two cells on the left\r\n        if (row[colIndex - 1] === row[colIndex - 2])\r\n            color2 = row[colIndex - 1];\r\n    }\r\n    let filtered = colors.filter(item => (item !== color1 && item !== color2))\r\n    return filtered[Math.floor(Math.random() * filtered.length)]\r\n}\r\nlet board = []\r\nfor (let i = 0; i < 10; i++) {\r\n    let row = [];\r\n    for (let j = 0; j < 10; j++) {\r\n        row.push(fillCell(i, j, board, row));\r\n    }\r\n    board.push(row)\r\n}\r\n\r\nexport const Board = (props) => {\r\n\r\n    // console.log(board)\r\n    const myBoard = []\r\n    for (let i = 0; i < 10; i++) {\r\n        let row = [];\r\n        for (let j = 0; j < 10; j++) {\r\n            row.push(fillCell(i, j, myBoard, row));\r\n        }\r\n        myBoard.push(row)\r\n    }\r\n    let [board, setBoard] = useState(myBoard)\r\n\r\n    const getMatches = (board) => {\r\n        let matches = []\r\n        let match = [];\r\n        for (let i = 0; i < board.length; i++) {\r\n            let curr = -1;\r\n            for (let j = 0; j < board[i].length; j++) {\r\n                if (board[i][j] !== curr) {\r\n                    curr = board[i][j]\r\n                    if (match.length >= 3) {\r\n                        matches.push(match)\r\n                    }\r\n                    match = []\r\n                    match.push({ i, j });\r\n                }\r\n                else {\r\n                    match.push({ i, j })\r\n                    if (j == board.length - 1 && match.length >= 3)\r\n                        matches.push(match)\r\n                }\r\n            }\r\n            match = [];\r\n        }\r\n        for (let i = 0; i < board.length; i++) {\r\n            let curr = -1;\r\n            for (let j = 0; j < board[i].length; j++) {\r\n                if (board[j][i] !== curr) {\r\n                    curr = board[j][i]\r\n                    if (match.length >= 3) {\r\n                        matches.push(match)\r\n                    }\r\n                    match = []\r\n                    match.push({ \"i\": j, \"j\": i });\r\n                }\r\n                else {\r\n                    match.push({ \"i\": j, \"j\": i })\r\n                    if (i == board.length - 1 && match.length >= 3)\r\n                        matches.push(match)\r\n                }\r\n            }\r\n            match = [];\r\n        }\r\n        // console.log(matches)\r\n        return matches;\r\n    }\r\n\r\n    let refreshCells = (board, matches) => {\r\n        // let temp = JSON.parse(JSON.stringify(board))\r\n        // for (let i = 0; i < board.length; i++) {\r\n        //     let row= [];\r\n        //     for (let j = 0; j < board[i].length; j++) {\r\n        //         row.push(board[i][j])\r\n        //     }\r\n        // }\r\n        let temp = JSON.parse(JSON.stringify(board))\r\n        for (let i = 0; i < matches.length; i++) {\r\n            for (let j = 0; j < matches[i].length; j++) {\r\n                temp[matches[i][j][\"i\"]][matches[i][j][\"j\"]] = Math.floor(Math.random() * 5);\r\n            }\r\n        }\r\n        return temp;\r\n    }\r\n\r\n    function sleep(ms) {\r\n        return new Promise(resolve => setTimeout(resolve, ms));\r\n    }\r\n\r\n    let cascadeBoard = (board) => {\r\n        console.log(JSON.stringify(board))\r\n        while (true) {\r\n            // await sleep(500);\r\n            let matches = getMatches(board);\r\n            // console.log(matches)\r\n           \r\n            console.log(matches, matches.length *50)\r\n            if (matches.length === 0)\r\n                break;\r\n            board = refreshCells(board, matches)\r\n            props.updateScore(matches.length * 50)\r\n            setBoard(board)\r\n            // board1 = refreshCells(board1, matches)\r\n            // console.log(JSON.stringify(board1))\r\n            // console.log(\"-------------------------------------------\")\r\n        }\r\n    }\r\n\r\n    const [clickedCells, setClickedCells] = useState([])\r\n    const swapColor = async (r, c) => {\r\n        const temp = [...clickedCells]\r\n        temp.push({ r, c })\r\n        setClickedCells(temp)\r\n        if (temp.length == 1) {\r\n            return\r\n        }\r\n        if (temp.length == 2) {\r\n            let isValidMove = true;\r\n            if (temp[0][\"r\"] === temp[1][\"r\"] && temp[0][\"c\"] === temp[1][\"c\"]) {\r\n                isValidMove = false\r\n            }\r\n            else if (temp[0][\"r\"] === temp[1][\"r\"]) {\r\n                if (Math.abs(temp[0][\"c\"] - temp[1][\"c\"]) == 1) {\r\n                    let tempColor = board[temp[0][\"r\"]][temp[0][\"c\"]]\r\n                    let tempBoard = JSON.parse(JSON.stringify(board))\r\n                    tempBoard[temp[0][\"r\"]][temp[0][\"c\"]] = tempBoard[temp[1][\"r\"]][temp[1][\"c\"]]\r\n                    tempBoard[temp[1][\"r\"]][temp[1][\"c\"]] = tempColor\r\n                    setBoard(tempBoard)\r\n                    console.log(clickedCells)\r\n                    setClickedCells([])\r\n                    cascadeBoard(tempBoard);\r\n                }\r\n            }\r\n            else if (temp[0][\"c\"] === temp[1][\"c\"]) {\r\n                if (Math.abs(temp[0][\"r\"] - temp[1][\"r\"]) <= 1) {\r\n                    let tempColor = board[temp[0][\"r\"]][temp[0][\"c\"]]\r\n                    let tempBoard = JSON.parse(JSON.stringify(board))\r\n                    tempBoard[temp[0][\"r\"]][temp[0][\"c\"]] = tempBoard[temp[1][\"r\"]][temp[1][\"c\"]]\r\n                    tempBoard[temp[1][\"r\"]][temp[1][\"c\"]] = tempColor\r\n                    setBoard(tempBoard)\r\n                    setClickedCells([])\r\n                    cascadeBoard(tempBoard);\r\n                }\r\n            }\r\n            else {\r\n                isValidMove = false;\r\n                setClickedCells([])\r\n            }\r\n\r\n            if (!isValidMove) { //reset array\r\n                setClickedCells([])\r\n            }\r\n        }\r\n    }\r\n    return (<div><Container >\r\n        {\r\n            board.map((_row, indexRow) => <Row>\r\n                {_row.map((_col, indexCol) =>\r\n                    <Cell row={indexRow} col={indexCol} backgroundId={board[indexRow][indexCol]} swapColor={swapColor}>\r\n                    </Cell>)}\r\n            </Row>)\r\n\r\n        }\r\n    </Container ></div>)\r\n}\r\n"]},"metadata":{},"sourceType":"module"}